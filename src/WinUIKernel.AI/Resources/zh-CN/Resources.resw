<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessKey" xml:space="preserve">
    <value>访问密钥</value>
  </data>
  <data name="AccessKeyDescription" xml:space="preserve">
    <value>填入来自 {0} 的 API 密钥</value>
  </data>
  <data name="AccessKeyPlaceholder" xml:space="preserve">
    <value>{0} API 密钥</value>
  </data>
  <data name="AccessKeyPlaceholderText" xml:space="preserve">
    <value>访问服务的密钥</value>
  </data>
  <data name="AccessKeySecret" xml:space="preserve">
    <value>访问密文（AccessKey Secret）</value>
  </data>
  <data name="AddYourCustomModel" xml:space="preserve">
    <value>添加自定义模型</value>
  </data>
  <data name="AliAccessKeySecretDescription" xml:space="preserve">
    <value>在阿里云中注册并获取 Secret</value>
  </data>
  <data name="AliTranslateAccessKeyDescription" xml:space="preserve">
    <value>在阿里云中注册并获取密钥</value>
  </data>
  <data name="ApiKey" xml:space="preserve">
    <value>API 密钥（API Key）</value>
  </data>
  <data name="AppId" xml:space="preserve">
    <value>应用 ID</value>
  </data>
  <data name="AzureOpenAIAccessKeyDescription" xml:space="preserve">
    <value>在 Azure 门户相应资源的 "密钥与终结点" 中找到此值，可用 KEY1 或 KEY2</value>
  </data>
  <data name="AzureOpenAIEndpointDescription" xml:space="preserve">
    <value>在 Azure 门户相应资源的 "密钥与终结点" 中找到此值</value>
  </data>
  <data name="AzureRegionDescription" xml:space="preserve">
    <value>在 Azure 门户相应资源的 "密钥与终结点" 中找到此值</value>
  </data>
  <data name="AzureSpeechAccessKeyDescription" xml:space="preserve">
    <value>在 Azure 门户相应资源的 "密钥与终结点" 中找到此值，可用 KEY1 或 KEY2</value>
  </data>
  <data name="AzureTranslateAccessKeyDescription" xml:space="preserve">
    <value>在 Azure 门户相应资源的 "密钥与终结点" 中找到此值，可用 KEY1 或 KEY2</value>
  </data>
  <data name="BaiduAppIdDescription" xml:space="preserve">
    <value>在百度翻译开放平台中注册并获取 App ID</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="ChatModelIdPlaceholder" xml:space="preserve">
    <value>如 "gpt-4"</value>
  </data>
  <data name="ChatModelNamePlaceholder" xml:space="preserve">
    <value>如 "ChatGPT 4"</value>
  </data>
  <data name="Confirm" xml:space="preserve">
    <value>确认</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>创建</value>
  </data>
  <data name="CreateCustomModel" xml:space="preserve">
    <value>创建自定义模型</value>
  </data>
  <data name="CustomModel" xml:space="preserve">
    <value>自定义模型</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>删除</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>编辑</value>
  </data>
  <data name="Endpoint" xml:space="preserve">
    <value>终结点</value>
  </data>
  <data name="EndpointDescription" xml:space="preserve">
    <value>必须包含 http(s)://</value>
  </data>
  <data name="EndpointPlaceholder" xml:space="preserve">
    <value>如 https://api.openai.com/v1</value>
  </data>
  <data name="ErnieSecretDescription" xml:space="preserve">
    <value>从百度千帆大模型平台的 "应用接入" 中获取 Secret Key</value>
  </data>
  <data name="HunyuanSecretIdDescription" xml:space="preserve">
    <value>在 "API密钥管理" 中获取 SecretId</value>
  </data>
  <data name="HunyuanSecretKeyDescription" xml:space="preserve">
    <value>在 "API密钥管理" 中创建 SecretKey 时获取</value>
  </data>
  <data name="KeyId" xml:space="preserve">
    <value>密钥 ID</value>
  </data>
  <data name="ModelAlreadyExist" xml:space="preserve">
    <value>模型已存在</value>
  </data>
  <data name="ModelId" xml:space="preserve">
    <value>模型 ID</value>
  </data>
  <data name="ModelIdDescription" xml:space="preserve">
    <value>模型 ID 是该模型的真实标识名称，AI 服务通过此标识确定模型</value>
  </data>
  <data name="ModelName" xml:space="preserve">
    <value>模型名称</value>
  </data>
  <data name="ModelNameDescription" xml:space="preserve">
    <value>模型名称是应用内部显示在界面上的可读名称</value>
  </data>
  <data name="ModelNameOrIdCanNotBeEmpty" xml:space="preserve">
    <value>模型名称或ID不能为空</value>
  </data>
  <data name="ModifyCustomModel" xml:space="preserve">
    <value>编辑自定义模型</value>
  </data>
  <data name="MoreOptions" xml:space="preserve">
    <value>更多选项</value>
  </data>
  <data name="OptionalPlaceholder" xml:space="preserve">
    <value>如果没有则不填</value>
  </data>
  <data name="OrganizationOptional" xml:space="preserve">
    <value>组织（可选）</value>
  </data>
  <data name="PredefinedModels" xml:space="preserve">
    <value>预定义模型</value>
  </data>
  <data name="PredefinedModelsDescription" xml:space="preserve">
    <value>查看 {0} 的内置模型列表</value>
  </data>
  <data name="Region" xml:space="preserve">
    <value>位置/区域</value>
  </data>
  <data name="RegionPlaceholderText" xml:space="preserve">
    <value>服务所在地区</value>
  </data>
  <data name="SecretId" xml:space="preserve">
    <value>密文 ID（Secret ID）</value>
  </data>
  <data name="SecretKey" xml:space="preserve">
    <value>密文密钥（Secret Key）</value>
  </data>
  <data name="SeeAllPredefinedModels" xml:space="preserve">
    <value>查看全部预定义模型</value>
  </data>
  <data name="SparkAppIdDescription" xml:space="preserve">
    <value>在讯飞开放平台中注册应用并获取 App ID</value>
  </data>
  <data name="SparkSecretDescription" xml:space="preserve">
    <value>在讯飞开放平台中注册应用并获取 Secret</value>
  </data>
  <data name="TencentSecretIdDescription" xml:space="preserve">
    <value>在 "API密钥管理" 中获取 SecretId</value>
  </data>
  <data name="TencentSecretKeyDescription" xml:space="preserve">
    <value>在 "API密钥管理" 中创建 SecretKey 时获取</value>
  </data>
  <data name="VolcanoKeyIdDescription" xml:space="preserve">
    <value>在火山引擎的 "API访问密钥" 中获取 Access Key ID</value>
  </data>
  <data name="VolcanoSecretKeyDescription" xml:space="preserve">
    <value>在火山引擎的 "API访问密钥" 中获取 Secret Access Key</value>
  </data>
  <data name="YoudaoAppIdDescription" xml:space="preserve">
    <value>在有道开放平台中注册并获取 App ID</value>
  </data>
</root>