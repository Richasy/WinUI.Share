<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessKey" xml:space="preserve">
    <value>訪問密鑰</value>
  </data>
  <data name="AccessKeyDescription" xml:space="preserve">
    <value>填入來自 {0} 的 API 金鑰</value>
  </data>
  <data name="AccessKeyPlaceholder" xml:space="preserve">
    <value>{0} API 金鑰</value>
  </data>
  <data name="AccessKeyPlaceholderText" xml:space="preserve">
    <value>訪問服務的密鑰</value>
  </data>
  <data name="AccessKeySecret" xml:space="preserve">
    <value>訪問密文（AccessKey Secret）</value>
  </data>
  <data name="AddYourCustomModel" xml:space="preserve">
    <value>新增自訂模型</value>
  </data>
  <data name="AliAccessKeySecretDescription" xml:space="preserve">
    <value>在阿里雲中註冊並獲取 Secret</value>
  </data>
  <data name="AliTranslateAccessKeyDescription" xml:space="preserve">
    <value>在阿里雲中註冊並獲取密鑰</value>
  </data>
  <data name="ApiKey" xml:space="preserve">
    <value>API 金鑰（API Key）</value>
  </data>
  <data name="AppId" xml:space="preserve">
    <value>應用程式 ID</value>
  </data>
  <data name="AzureOpenAIAccessKeyDescription" xml:space="preserve">
    <value>在 Azure 入口網站對應資源的 "金鑰與終結點" 中找到此值，可用 KEY1 或 KEY2</value>
  </data>
  <data name="AzureOpenAIEndpointDescription" xml:space="preserve">
    <value>在 Azure 入口網站對應資源的 "金鑰與終結點" 中找到此值</value>
  </data>
  <data name="AzureRegionDescription" xml:space="preserve">
    <value>在 Azure 入口網站對應資源的 "金鑰與終結點" 中找到此值</value>
  </data>
  <data name="AzureSpeechAccessKeyDescription" xml:space="preserve">
    <value>在 Azure 入口網站對應資源的 "金鑰與終結點" 中找到此值，可用 KEY1 或 KEY2</value>
  </data>
  <data name="AzureTranslateAccessKeyDescription" xml:space="preserve">
    <value>在 Azure 入口網站對應資源的 "金鑰與終結點" 中找到此值，可用 KEY1 或 KEY2</value>
  </data>
  <data name="BaiduAppIdDescription" xml:space="preserve">
    <value>在百度翻譯開放平台中註冊並取得 App ID</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="ChatModelIdPlaceholder" xml:space="preserve">
    <value>如 "gpt-4"</value>
  </data>
  <data name="ChatModelNamePlaceholder" xml:space="preserve">
    <value>如 "ChatGPT 4"</value>
  </data>
  <data name="CodestralKey" xml:space="preserve">
    <value>Codestral 密鑰</value>
  </data>
  <data name="CodestralKeyDescription" xml:space="preserve">
    <value>輸入專屬於 Codestral 的金鑰</value>
  </data>
  <data name="Confirm" xml:space="preserve">
    <value>確認</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>創建</value>
  </data>
  <data name="CreateCustomModel" xml:space="preserve">
    <value>建立自訂模型</value>
  </data>
  <data name="CustomModel" xml:space="preserve">
    <value>自訂模型</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>刪除</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>編輯</value>
  </data>
  <data name="Endpoint" xml:space="preserve">
    <value>終結點</value>
  </data>
  <data name="EndpointDescription" xml:space="preserve">
    <value>必須包含 http(s)://</value>
  </data>
  <data name="EndpointPlaceholder" xml:space="preserve">
    <value>如 https://api.openai.com/v1</value>
  </data>
  <data name="ErnieSecretDescription" xml:space="preserve">
    <value>從百度千帆大模型平台的 "應用程式接入" 中取得 Secret Key</value>
  </data>
  <data name="HunyuanSecretIdDescription" xml:space="preserve">
    <value>在 "API金鑰管理" 中取得 SecretId</value>
  </data>
  <data name="HunyuanSecretKeyDescription" xml:space="preserve">
    <value>在 "API金鑰管理" 中建立 SecretKey 時獲取</value>
  </data>
  <data name="KeyId" xml:space="preserve">
    <value>密鑰 ID</value>
  </data>
  <data name="ModelAlreadyExist" xml:space="preserve">
    <value>模型已存在</value>
  </data>
  <data name="ModelId" xml:space="preserve">
    <value>模型 ID</value>
  </data>
  <data name="ModelIdDescription" xml:space="preserve">
    <value>模型 ID 是該模型的真實識別名稱，AI 服務透過此標識確定模型</value>
  </data>
  <data name="ModelName" xml:space="preserve">
    <value>模型名稱</value>
  </data>
  <data name="ModelNameDescription" xml:space="preserve">
    <value>模型名稱是應用程式內部顯示在介面上的可讀名稱</value>
  </data>
  <data name="ModelNameOrIdCanNotBeEmpty" xml:space="preserve">
    <value>模型名稱或ID不能為空</value>
  </data>
  <data name="ModifyCustomModel" xml:space="preserve">
    <value>編輯自訂模型</value>
  </data>
  <data name="MoreOptions" xml:space="preserve">
    <value>更多選項</value>
  </data>
  <data name="OptionalPlaceholder" xml:space="preserve">
    <value>如果沒有則不填</value>
  </data>
  <data name="OrganizationOptional" xml:space="preserve">
    <value>組織（可選）</value>
  </data>
  <data name="PredefinedModels" xml:space="preserve">
    <value>内建模型</value>
  </data>
  <data name="PredefinedModelsDescription" xml:space="preserve">
    <value>查看 {0} 的內建模型列表</value>
  </data>
  <data name="Region" xml:space="preserve">
    <value>位置/區域</value>
  </data>
  <data name="RegionPlaceholderText" xml:space="preserve">
    <value>服務所在地區</value>
  </data>
  <data name="SecretId" xml:space="preserve">
    <value>密文 ID（Secret ID）</value>
  </data>
  <data name="SecretKey" xml:space="preserve">
    <value>密文金鑰（Secret Key）</value>
  </data>
  <data name="SeeAllPredefinedModels" xml:space="preserve">
    <value>看全部内建模型</value>
  </data>
  <data name="SparkAppIdDescription" xml:space="preserve">
    <value>在訊飛開放平台中註冊應用程式並取得 App ID</value>
  </data>
  <data name="SparkSecretDescription" xml:space="preserve">
    <value>在訊飛開放平台中註冊應用程式並取得 Secret</value>
  </data>
  <data name="TencentSecretIdDescription" xml:space="preserve">
    <value>在 "API金鑰管理" 中取得 SecretId</value>
  </data>
  <data name="TencentSecretKeyDescription" xml:space="preserve">
    <value>在 "API金鑰管理" 中建立 SecretKey 時獲取</value>
  </data>
  <data name="UseCodestral" xml:space="preserve">
    <value>使用 Codestral</value>
  </data>
  <data name="UseCodestralDescription" xml:space="preserve">
    <value>使用 Codestral API 及其模型</value>
  </data>
  <data name="VolcanoKeyIdDescription" xml:space="preserve">
    <value>在火山引擎的 "API訪問金鑰" 中取得 Access Key ID</value>
  </data>
  <data name="VolcanoSecretKeyDescription" xml:space="preserve">
    <value>在火山引擎的 "API訪問金鑰" 中取得 Secret Access Key</value>
  </data>
  <data name="YoudaoAppIdDescription" xml:space="preserve">
    <value>在有道開放平台中註冊並取得 App ID</value>
  </data>
</root>